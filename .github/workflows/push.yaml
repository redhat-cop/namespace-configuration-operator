name: push
on: 
  push:
    branches:
      - master
      - main
    tags:        
      - v*
    
jobs:
  build:
    runs-on: ubuntu-latest
    name: build
    steps:

    - name: set repo name
      shell: bash
      run: | 
        echo "REPOSITORY_NAME=$(basename $GITHUB_REPOSITORY)" >> $GITHUB_ENV    

    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.15
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Download operator sdk
      shell: bash
      env:
        RELEASE_VERSION: v1.3.0
      run: | 
        curl -LO https://github.com/operator-framework/operator-sdk/releases/download/${RELEASE_VERSION}/operator-sdk_linux_amd64
        chmod +x operator-sdk_linux_amd64
        mkdir ${HOME}/bin
        mv operator-sdk_linux_amd64 ${HOME}/bin/operator-sdk
        echo "${HOME}/bin" >> $GITHUB_PATH

    - name: Get the version for tags
      id: get_version1
      if: "startsWith(github.ref, 'refs/tags')"
      shell: bash
      run: |
        echo "OPERATOR_IMAGE_TAG=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV
        echo "BUNDLE_IMAGE_TAG=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV
        export TAG=${GITHUB_REF/refs\/tags\//}
        echo "BUNDLE_VERSION=${TAG:1}" >> $GITHUB_ENV
        export SEMVER_COMPLIANT=$(echo ${TAG:1} | egrep '^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-])(?:\.(?:0|[1-9]\d|\d*[a-zA-Z-][0-9a-zA-Z-]))))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$')
        if [ -z "$SEMVER_COMPLIANT" ]; then   echo "invalid semver tag ${GITHUB_REF/refs\/tags\//}"; exit 1; fi



    - name: Get the version for merge
      id: get_version2
      if: "! startsWith(github.ref, 'refs/tags')"
      shell: bash 
      run: |
        echo "OPERATOR_IMAGE_TAG=latest" >> $GITHUB_ENV
        echo "BUNDLE_IMAGE_TAG=v0.0.1" >> $GITHUB_ENV
        echo "BUNDLE_VERSION=0.0.1" >> $GITHUB_ENV 

    - name: build code
      run:  make
      shell: bash
      
    - name: build bundle
      shell: bash 
      run: |
        make bundle IMG=${{ secrets.STAKATER_NEXUS_PROD_REGISTRY }}/${{ github.repository }}:${OPERATOR_IMAGE_TAG} VERSION=${BUNDLE_VERSION} DEFAULT_CHANNEL=alpha

    - name: verify bundle
      shell: bash
      run: operator-sdk bundle validate ./bundle --select-optional name=operatorhub

    - name: build chart
      shell: bash
      run: make helmchart VERSION=${BUNDLE_VERSION} IMG=${{ secrets.STAKATER_NEXUS_PROD_REGISTRY }}/${{ github.repository }}:${OPERATOR_IMAGE_TAG}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    
    - name: Login to DockerHub
      uses: docker/login-action@v1 
      with:
        registry: ${{ secrets.STAKATER_NEXUS_PROD_REGISTRY }}
        username: ${{ secrets.STAKATER_NEXUS_PROD_USERNAME }}
        password: ${{ secrets.STAKATER_NEXUS_PROD_PASSWORD }}

    - name: "Build and Push Operator Image"
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: "${{ secrets.STAKATER_NEXUS_PROD_REGISTRY }}/${{ github.repository }}:${{ env.OPERATOR_IMAGE_TAG }}"

    - name: "Build and Push Bundle Image"
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./bundle.Dockerfile
        push: true
        tags: "${{ secrets.STAKATER_NEXUS_PROD_REGISTRY }}/${{ github.repository }}-bundle:${{ env.BUNDLE_IMAGE_TAG }}"

    - name: "Verify bundle image"
      shell: bash
      run: operator-sdk bundle validate ${{ secrets.STAKATER_NEXUS_PROD_REGISTRY }}/${{ github.repository }}-bundle:${BUNDLE_IMAGE_TAG} --select-optional name=operatorhub
      
  release-helm-chart:
    name: Helm Chart Release      
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags')"
    needs: ["build"]
    steps:

      - name: set repo name
        shell: bash
        run: | 
          echo "REPOSITORY_NAME=$(basename $GITHUB_REPOSITORY)" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v2       
      
      - name: Get the version
        id: get_version
        run: echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV

      - name: Configure Git
        shell: bash
        run: |
          git config --global user.name "$GITHUB_ACTOR"
          git config --global user.email "$GITHUB_ACTOR@users.noreply.github.com"

      # Setting up helm binary
      - uses: azure/setup-helm@v1

      # Publish helm chart to nexus
      - name: Publish Helm chart
        run: |
          helm package ./charts/namespace-configuration-operator --destination ./packaged-chart
          curl -u ${{ secrets.STAKATER_NEXUS_PROD_HELM_USERNAME }}:${{ secrets.STAKATER_NEXUS_PROD_HELM_PASSWORD }} ${{ secrets.STAKATER_NEXUS_PROD_HELM_REGISTRY }} --upload-file ./packaged-chart/*.tgz
          rm -rf ./packaged-chart

  release-github:
    name: GitHub Release
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags')"
    needs: ["build"]
    steps:

      - name: set repo name
        shell: bash
        run: | 
          echo "REPOSITORY_NAME=$(basename $GITHUB_REPOSITORY)" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v2
      - run: |
          git fetch --prune --unshallow
      - name: Get the version
        id: get_version
        run: echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV
      - name: Generate Changelog
        run: |
          LATEST_TAG=$(git tag --sort=creatordate | sed '$!d')
          PREVIOUS_TAG=$(git tag --sort=creatordate | sed 'x;$!d')
          if [ -z "${PREVIOUS_TAG}" ]; then
            REV_RANGE=${LATEST_TAG}
          else
            REV_RANGE=${PREVIOUS_TAG}..${LATEST_TAG}
          fi
          git log --pretty=format:"- %s %H (%aN)" --no-merges ${REV_RANGE} > ${VERSION}-CHANGELOG.txt
          cat ${VERSION}-CHANGELOG.txt
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: ${{ env.VERSION }}-CHANGELOG.txt
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.STAKATER_GITHUB_TOKEN }}
